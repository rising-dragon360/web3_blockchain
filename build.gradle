buildscript {
    ext.bouncycastleVersion = '1.61'
    ext.jacksonVersion = '2.8.5'
    ext.javapoetVersion = '1.7.0'
    ext.jnr_unixsocketVersion = '0.21'
    ext.okhttpVersion = '3.8.1'
    ext.rxjavaVersion = '2.2.2'
    ext.slf4jVersion = '1.7.25'
    ext.javaWebSocketVersion = '1.3.8'
    ext.picocliVersion = '3.0.0'

    // test dependencies
    ext.equalsverifierVersion = '3.1.10'
    ext.junitVersion = '5.5.2'
    ext.junitBenchmarkVersion = '0.7.2'
    ext.logbackVersion = '1.2.3'
    ext.mockitoJunitVersion = "3.1.0"

    repositories { mavenCentral() }
}

plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id "com.diffplug.gradle.spotless" version "3.25.0"
    id 'io.codearte.nexus-staging' version '0.21.1'
}


description 'web3j base project'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'com.diffplug.gradle.spotless'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8


    spotless {
        java {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/src/*/java/**/*.java'
                exclude '**/.gradle/**'
                exclude '**/generated/**'
            }
            removeUnusedImports()
            googleJavaFormat("1.7").aosp()
            importOrder 'java', '', 'org.web3j', '\\#'
            trimTrailingWhitespace()
            endWithNewline()
            licenseHeaderFile "$rootDir/gradle/spotless.java.license"
        }
        groovyGradle {
            target '*.gradle'
            greclipse().configFile(rootProject.file('gradle/formatter.properties'))
            endWithNewline()
            indentWithSpaces(4)
            paddedCell()
        }
    }

    repositories { mavenCentral() }

    compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    jacoco {
        toolVersion = '0.8.4' // See http://www.eclemma.org/jacoco/.
    }

    jacocoTestReport {
        reports { xml.enabled true }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

    dependencies {
        testCompile "org.junit.jupiter:junit-jupiter:$junitVersion"
        testCompile "org.mockito:mockito-junit-jupiter:$mockitoJunitVersion"
    }
}

configure(subprojects.findAll { it.name != 'integration-tests' }) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    ext {
        ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
        ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
        signingKey = project.hasProperty('signingKey') ? project.property('signingKey') : new File("$rootDir/web3j.asc").getText('UTF-8')
        signingPassword = project.hasProperty('signingPassword') ? project.property('signingPassword') : System.getenv('GPG_PASSPHRASE')
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    javadoc { options.encoding = 'UTF-8' }

    artifacts { archives sourcesJar, javadocJar, testJar }

    signing {
        sign configurations.archives
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }

    archivesBaseName = project.name

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'web3j'
                    packaging 'jar'
                    description project.description
                    url 'https://web3j.io'

                    scm {
                        connection 'scm:git:https://github.com/web3j/web3j.git'
                        url 'https://github.com/web3j/web3j.git'
                        developerConnection 'scm:git://github.com/web3j/web3j.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'conor10'
                            name 'Conor Svensson'
                            email 'conor10@gmail.com'
                        }
                    }
                }
            }
        }
    }

    task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
        dependsOn = subprojects.test
        getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
        getAdditionalSourceDirs().from(subprojects.sourceSets.main.allSource.srcDirs)
        getClassDirectories().from(subprojects.sourceSets.main.output)
        getExecutionData().from(subprojects.jacocoTestReport.executionData)
        reports { xml.enabled = true }

        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }

        afterEvaluate {
            getClassDirectories().from(files(classDirectories.files.collect {
                fileTree(dir: it,
                exclude: [
                    'org/web3j/abi/datatypes/generated/**',
                    'org/web3j/tuples/generated/**',
                    'org/web3j/ens/contracts/generated/**'
                ])
            }))
        }
    }
}
